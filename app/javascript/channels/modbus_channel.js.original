import consumer from "channels/consumer"

let tilesetWidth;
let tilesetHeight;
let layerHeight;
let columns;
let tile_columns;

// XMLHttpRequest를 사용하여 파일 불러오기
var xhr = new XMLHttpRequest();
xhr.open('GET', '/psg-dma-sample/psg-dma.tmx', true);
xhr.onreadystatechange = function() {
  if (xhr.readyState === 4 && xhr.status === 200) {
    var xmlString = xhr.responseText;
    // XML 파싱
    var parser = new DOMParser();
    var xmlDoc = parser.parseFromString(xmlString, 'text/xml');
    // 필요한 속성 값 가져오기
    tilesetWidth = xmlDoc.getElementsByTagName('tileset')[0].getAttribute('tilewidth');
    tilesetHeight = xmlDoc.getElementsByTagName('tileset')[0].getAttribute('tileheight');
    layerHeight = xmlDoc.getElementsByTagName('map')[0].getAttribute('height');
    columns = xmlDoc.getElementsByTagName('map')[0].getAttribute('width');
    tile_columns = xmlDoc.getElementsByTagName('tileset')[0].getAttribute('columns');
  }
};
xhr.send();

function calculateBackgroundPosition(tileId) {
  var tileSize = tilesetWidth; // 타일 크기 (가로와 세로가 동일하다고 가정)
  var tilesPerRow = tile_columns; // 가로에 있는 타일의 수 (TSX 파일에서 선언한 가로 타일의 수와 동일하다고 가정)
  var x = (tileId % tilesPerRow) * tileSize;
  var y = Math.floor(tileId / tilesPerRow) * tileSize;
  return "-" + x + "px " + "-" + y + "px";
}

function barGaugeUpdate( div, height, top, percentage, backgroundColor ) {
  // Analog Value
  var customDiv = document.getElementById(div);
  var containerHeight = height; // "px"를 제거하고 숫자로 변환합니다.
  var containerTop = top; // "px"를 제거하고 숫자로 변환합니다.
  var calculatedHeight = (containerHeight * percentage) / 100; // 퍼센트 값을 계산하여 적용합니다.
  customDiv.style.height = calculatedHeight + 'px'; // 새로운 높이를 적용합니다.
  var top = containerHeight - calculatedHeight;
  customDiv.style.top = - ( - containerTop - top ) + 'px'; // 새로운 높이를 적용합니다.
  customDiv.style.backgroundColor = backgroundColor;
  // Analog Value
}

function analogUpdate( div, tileId, fontSize, color, value, offSetX, offSetY, align ) {
  const analogDiv = document.getElementById(div);
  let top = tilesetHeight * ( layerHeight - parseInt(tileId / columns)  )
  analogDiv.style.top = - ( top ) + offSetY + 'px'; // 새로운 높이를 적용합니다.
  analogDiv.style.left = tilesetWidth * ( tileId % columns ) + offSetX + 'px'; // 새로운 높이를 적용합니다.
  analogDiv.style.textAlign = align;
  analogDiv.style.fontSize = fontSize + 'pt';
  analogDiv.style.color = color;
  analogDiv.style.fontWeight = 'bold';
  analogDiv.innerText = value;
}

consumer.subscriptions.create("ModbusChannel", {
  connected() {
    // Called when the subscription is ready for use on the server
    console.log("Connected to the modbus channel");
  },

  disconnected() {
    // Called when the subscription has been terminated by the server
  },

  received(data) {
    // Called when there's incoming data on the websocket for this channel
    console.log(data);
    // const statusDiv = document.getElementById('status');
    // statusDiv.innerHTML = data.value;

    if (data.action === "modbus") {

      const binaryString = data.value;

      // 각 글자마다 작업 수행
      const layer = "digital" // 밸브레이어
      const valve = [120, 121, 122, 123, 124, 125, 126, 53, 56, 59]; // 밸브타일
      const valve_off = calculateBackgroundPosition(13);
      const valve_on = calculateBackgroundPosition(12);

      analogUpdate( 'analog-value4', 140, 12, 'white', "H 밸브", 0, 14, 'center');
      analogUpdate( 'analog-value5', 141, 12, 'white', "H2 밸브", 0, 14, 'center');
      analogUpdate( 'analog-value6', 142, 12, 'white', "O 밸브", 0, 14, 'center');
      analogUpdate( 'analog-value7', 143, 12, 'white', "O2 밸브", 0, 14, 'center');
      analogUpdate( 'analog-value8', 144, 12, 'white', "H2O 밸브", 0, 14, 'center');
      analogUpdate( 'analog-value9', 145, 12, 'white', "H2O 밸브", 0, 14, 'center');

      for (let i = 0; i < valve.length; i++) {
        const binaryChar = binaryString[i];
        const valveId = layer + '-' + valve[i];
        const valveDiv = document.getElementById(valveId);
        // 글자에 따른 작업 수행
        switch (binaryChar) {
          case '0':
            // 0인 경우에 대한 작업 수행
            valveDiv.style.backgroundPosition = valve_off;
            break;
          case '1':
            // 1인 경우에 대한 작업 수행
            valveDiv.style.backgroundPosition = valve_on;
            break;
          default:
            // 다른 글자인 경우에 대한 작업 수행
            console.log('Error!');
            break;
        }
      }
    }

    if (data.action === "value") {
      barGaugeUpdate('container-dark',152, -200, data.value[0] / 1000, 'red');
      barGaugeUpdate('container-dark2',152, -200, data.value[1] / 1000, 'red');
      barGaugeUpdate('container-light',152, -200, data.value[2] / 1000, 'yellow');

      barGaugeUpdate('container-red',111, -142, data.value[0] / 1000, 'green');
      barGaugeUpdate('container-yellow',111, -142, data.value[1] / 1000, 'white');
      barGaugeUpdate('container-green',111, -142, data.value[2] / 1000, 'DodgerBlue');

      barGaugeUpdate('container-dma',224, -287, data.value[0] / 1000, 'orange');
      barGaugeUpdate('container-dma2',224, -287, data.value[1] / 1000, 'black');
      barGaugeUpdate('container-dma3',224, -287, data.value[2] / 1000, 'white');

      analogUpdate( 'analog-value1', 230, 12, 'red', data.value[0], 0, 14, 'center');
      analogUpdate( 'analog-value2', 250, 14, 'red', data.value[1], 16, 38, 'left');
      analogUpdate( 'analog-value3', 270, 18, 'red', data.value[2], -14, 58, 'right');
    }
  }
});
